#!/usr/bin/perl

=head1 NAME

krouter - kdispatch program

=head1 SYNOPSIS

    kdispatch [OPTION]... <Event_Subject>...

    -c file
            config file for kDispatch. Default kconfig
    -m file
            memory file for kDispatch. Default kmem 
    --help       
            print this help message

Examples:

    kdispatch centtstdb_BACKUP_FAIL

=head1 DESCRIPTION

This is a dispatch router for paging support personals.

=head1 AUTHOR

nericka@gmail.com

=cut


use Getopt::Long qw(:config auto_help);
use Pod::Usage;

use strict;
use warnings;
use Getopt::Long;
use POSIX qw(strftime);
use Fcntl qw(:flock);

my $LOCK_EXCLUSIVE         = 2;
my $UNLOCK                 = 8;
my $LOCK_SHARED            = 1;
my $LOCK_NONBLOCKING       = 4;
my $default_mail="mailx";
my $default_config="kconfig";
my $default_mem="kmem";
my $date_long_tag="long";
my $date_short_tag="short";

#exit main();

main();


sub main {

    # Argument parsing
    my $verbose;
    my $all_event="|";
    my $cfile;
    my $mfile;
    my $config_default="kconfig";
    my $memory_default="kmem";
    my $event_sep="|";
    my $result = GetOptions (
        "c:s" => \$cfile,
        "m:s"   => \$mfile,
        'verbose' => \$verbose,
        #"optlist=s" => \@list,
        ) or pod2usage(1);
        

        
        pod2usage(1) unless @ARGV;
    
    #GetOptions(
    #	'verbose'  => \$verbose,
    #	'c' => \$zconfig,
    #	'm'=> \$zmemory,
    #) or pod2usage(1);
    #pod2usage(1) unless @ARGV;

    my (@event_subject) = @ARGV;
  
  if (defined $cfile && length $cfile > 0) {
    # do something with $name
        if (-r $cfile) {
    		print "Using config file $cfile\n" if $verbose;
    		#$cfile=$zconfig;
    		
    	}else{
    	    die "Cannot read $cfile\n";
    	}
}else
{
  $cfile=$config_default;
        if (-r $cfile) {
    		print "Using config file $cfile\n" if $verbose;
    		#$cfile=$zconfig;
    		
    	}else{
    	    die "Cannot read $cfile\n";
    	}  
  
}

      
      
  if (defined $mfile && length $mfile > 0) {
    # do something with $name
        if ((-r $mfile) and (-w $mfile)) {
    		print "Using memory file $mfile\n" if $verbose;
    		#$cfile=$zconfig;
    		
    	}else{
    	    die "Cannot read/write $mfile\n";
    	}
}else
{
  $mfile=$memory_default;
        if ((-r $mfile) && (-w $mfile )) {
    		print "Using memory file $mfile\n" if $verbose;
    		#$cfile=$zconfig;
    		
    	}else{
    	    die "Cannot read/write $mfile\n";
    	}  
  
}      
    #foreach my $esub (@event_subject) {
     #$all_event = $all_event.$event_sep.$esub;
     #if (length $all_event == 0 ) {
     #$all_event = " ";
     #}
     #$all_event = $all_event.$esub;     
     #$all_event = $all_event.$event_sep.$esub;
    #}
    
    #
    #to-do put debug and other init parameter in config file 
    #
    my $debug=1;
    if ($debug){
        print "all_event=$all_event\n";
        print "cfile=$cfile\n";
        print "mfile=$mfile\n";
        print "$event_subject[0]\n";
    }
    &dispatch($event_subject[0],0,0,"echo",$cfile,$mfile);    
    	

    #return 0;
}# end main

#getDate return date in string format 20161010
sub getDate{
my %date_rec;
my $date_short = strftime "%Y%m%d", localtime;
my $date_long = strftime "%Y%m%d%H%M%S", localtime;
#print $date;
$date_rec{$date_long_tag} = $date_long;
$date_rec{$date_short_tag} = $date_short;
return %date_rec;
}
#end getDate

#
#file2hash : read the file in k<file_name> e.g.=kconfig &  kmem  into hash table
#
#my $MAX_FILE_TRY = 20;
#my $sleep_time = 1;
#my $XLOCKFILE ="./kmem.lock";



sub file2hash {
    my ($file) = @_;
    #my $xfh;


open(my $data, '<', $file) or die "Could not open '$file' $!\n";
flock($data, $LOCK_EXCLUSIVE);

my %HoH;
my $key;
my $value;
my $who;
my $rec;
my $field;

#while ( my $line = <$data>) {
while ( <$data>) {
    #print $line;
    next unless (s/^(.*?):\s*//);
    $who = $1;
    #print $who;
    $rec = {};
    $HoH{$who} = $rec;
    for $field ( split ) {
        ($key, $value) = split /=/, $field;
        $rec->{$key} = $value;
    }
}

    #release_lock(\$xfh);
    close($data);
    return %HoH;

}
#
#end file2hash
#

#
#hash2print
#print out hash table in k<file_name> format
#
sub hash2print{
    #(my $hashref,my $debug,my $restTime) = @_;
    (my $hashref,my $debug) = @_;
    my %HoH = %$hashref;

    #sleep($restTime);
    #print "restTime=$restTime\n";

    my $family;
    my $role;

    my $key_tag=': ';
    for $family (sort keys %HoH ) {
        print "$family$key_tag";
        for $role ( sort keys %{ $HoH{$family} } ) {
             if ($debug){
               print "family:$family\n";
                print "role: $role\n";
             }
             print "$role=$HoH{$family}{$role} ";

        }
        print "\n";
    }
}
#
#end hash2print
#


sub dispatch{

        my $event= shift;
        my $restTime = shift ||0;
        my $debug = shift||0;
        my $mail_prog = shift || $default_mail;
        my $config_f = shift || $default_config;
        my $memory_f = shift || $default_mem;

        my $email1_tag="email1";
        my $email1_cnt_tag="email1_cnt";
        my $email2_tag="email2";
        my $email3_tag="email3";
        my $email2_cnt_tag="email2_cnt";

        my %h2=&file2hash($config_f);

        my %m2=file2hash($memory_f);


        my %today=&getDate();
        my $today_idx = $today{$date_short_tag};
        my $today_ext = $today{$date_long_tag};

        if ($debug){
            print "$today_idx\n";
            print "$today_ext\n";
            print "$event\n";
            print "$config_f\n";
            print "$memory_f\n";
            print "$mail_prog\n";
        }




        my $xemail1 = $h2{$event}{$email1_tag};
        my $xemail2 = $h2{$event}{$email2_tag};
        my $xemail1_cnt = $h2{$event}{$email1_cnt_tag};
        my $xemail3 = $h2{$event}{$email3_tag};
        my $xemail2_cnt = $h2{$event}{$email2_cnt_tag};

        #
        #initialize today_event_cnt is not happened today or increment and log
        #
        my $idx_tag = "_";
        if (exists $m2{$today_idx}{$event}) {
            $m2{$today_idx}{$event} = $m2{$today_idx}{$event} +1;
            $m2{$today_idx}{$event.$idx_tag.$today_ext} = 1;
        }else{
             $m2{$today_idx}{$event} = 1;
             $m2{$today_idx}{$event.$idx_tag.$today_ext} = 1;
        }



        if ($debug){
            print "$xemail1\n";
            print "$xemail2\n";
            print "$xemail1_cnt\n";
        }

        my $mail1_cmd_str = $mail_prog." -s ".$event." ".$xemail1;
        my $mail2_cmd_str = $mail_prog." -s ".$event." ".$xemail2;
        my $mail3_cmd_str = $mail_prog." -s ".$event." ".$xemail3;


        if ($m2{$today_idx}{$event} >$xemail2_cnt){

            system "$mail3_cmd_str";

        }elsif($m2{$today_idx}{$event} >$xemail1_cnt){

            system "$mail2_cmd_str";

        }else{

           system "$mail1_cmd_str";

        }

        # open filehandle for memory_file
        # might need mutex protection ??
        #
        open (my $mymem, '>', $memory_f);
        flock($mymem,$LOCK_EXCLUSIVE);
        # select new filehandle
        select $mymem;
        hash2print(\%m2);
        sleep($restTime);
        close $mymem;
        #hash2priint(\%m2);
        #open my $rm3d_fh, '>', $memory_f or die "...$!";
        #hash2file2(\%m2,$rm3d_fh);





}#end dispatch

